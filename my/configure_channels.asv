function param = configure_channels(param, N, spectrum_grid_size, ...
    channel_type, power_dbm, filter_parameter, symbol_in_filter, random_seed)
% Configure channel parameters

% Constellation size and type
% OOK: 2, 16QAM: 16
param.channel_type = cell(1, N); % strings
param.constellation_size = zeros(1, N); % int
param.bandwidth_channel = zeros(1, N);
for n=1:N
    param.channel_type{n} = channel_type{n};
    if strcmp(channel_type{n}, 'ook')
        param.constellation_size(n) = 2;
        param.bandwidth_channel(n) = 10*1e9;
    elseif strcmp(channel_type{n}, '16qam')
        param.constellation_size(n) = 16;
        param.bandwidth_channel(n) = 32*1e9;
    end
end

% [Hz], spectrum grid size
param.spectrum_grid_size = spectrum_grid_size*1e9; 
param.center_frequency_channel = param.spectrum_grid_size*...
    (linspace(0, N-1, N)-(N-1)/2);

% [W], power of channel in time domain, in contrast to the frequency domain 
% PSD measured in W/Hz
param.power_channel_time = zeros(N, 1);
if length(power_dbm)==1
    param.power_channel_time = 10^(power_dbm/10)/1e3*ones(N, 1); 
else
    assert(length(power_dbm)==N, ...
        sprintf('Length of power_dbm should be %d', N))
    param.power_channel_time = 10.^(power_dbm/10)/1e3; 
end

% filter parameter 
% Gaussian FIR for OOK 
% square-root RRC for 16QAM
assert(length(filter
param.filter_parameter = zeros(1, N);
for n=1:N
    param.filter_parameter = filter_parameter;
end

% number of symbols in filter
param.symbol_in_filter = 20*ones(1, N); % length of impulse response in symbol

% Random seed
param.random_seed = 2394759; % input to rng