function simulateScenario(powerOOK1, powerOOK2, symbolRate, channelSpacing)
%% Simulation of OOK1+OOK2
% Variables:
% QAM power: -20:1:10 
% OOK power: -20:1:10 
% channel spacing: [50, 100, 150, 200] GHz
% OOK symbol rate: 10 GHz

%% Define links and channels
% S = 0.06 ps/(nm^2*km) = 60 s/m^3
linkArray = [...
    Link('spanLength', 82e3, 'DCFLength', 80e3, 'S', 60); ...
    Link('spanLength', 82e3, 'DCFLength', 80e3, 'S', 60); ...
    Link('spanLength', 82e3, 'DCFLength', 80e3, 'S', 60); ...
    Link('spanLength', 82e3, 'DCFLength', 80e3, 'S', 60); ...
    Link('spanLength', 82e3, 'DCFLength', 90e3, 'S', 60)];

channelArray = [...
    Channel('modulation', 'OOK', ...
    'centerFrequency', 0e9, ...
    'symbolRate', symbolRate, ...
    'powerdBm', powerOOK1, ...
    'minNumberSymbol', 2^14); ...
    Channel('modulation', 'OOK', ...
    'centerFrequency', channelSpacing, ...
    'powerdBm', powerOOK2, ...
    'minNumberSymbol', 2^14)];

%%
simulationName = sprintf('POOK1_%d_POOK2_%d_symbolRate_%d_channelSpacing_%d', ...
    powerOOK1, powerOOK2, symbolRate/1e9, channelSpacing/1e9);

sp = SinglePolarization(...
    'simulationName', simulationName, ...
    'simulationId', 1, ...
    'linkArray', linkArray, ...
    'channelArray', channelArray, ...
    'useParallel', false);
sp.simulate();
% sp.saveSimulationResult();
sp.saveSimulationResult(true, false, false);

end